<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= user.username %>'s Profile</title>
    <link href="https://cdn.jsdelivr.net/npm/remixicon@3.5.0/fonts/remixicon.css" rel="stylesheet">
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');
        body {
            font-family: 'Inter', sans-serif;
        }
        .profile-image {
            width: 150px;
            height: 150px;
            object-fit: cover;
            object-position: center;
        }
        .post-image, .video-player {
            width: 100%;
            height: 100%;
            object-fit: contain;
            max-height: calc(100vh - 4rem);
        }
        .modal-content {
            max-height: calc(100vh - 4rem);
        }
        .modal-transition {
            transition: opacity 0.3s ease-out, transform 0.3s ease-out;
        }
        .interactive-gradient {
            background-size: 400% 400%;
            transition: background-position 0.3s ease;
        }
        /* From Uiverse.io by vinodjangid07 */ 
.button {
  width: 50px;
  height: 50px;
  border-radius: 50%;
  background-color: rgb(20, 20, 20);
  border: none;
  font-weight: 600;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  box-shadow: 0px 0px 20px rgba(0, 0, 0, 0.164);
  cursor: pointer;
  transition-duration: 0.3s;
  overflow: hidden;
  position: relative;
  gap: 2px;
}

.svgIcon {
  width: 12px;
  transition-duration: 0.3s;
}

.svgIcon path {
  fill: white;
}

.button:hover {
  transition-duration: 0.3s;
  background-color: rgb(255, 69, 69);
  align-items: center;
  gap: 0;
}

.bin-top {
  transform-origin: bottom right;
}
.button:hover .bin-top {
  transition-duration: 0.5s;
  transform: rotate(160deg);
}

    </style>
</head>
<body id="gradientContainer" class="w-full md:min-h-screen md:bg-gradient-to-br md:from-zinc-900 md:via-zinc-800 md:to-zinc-900 md:py-0 py-0 px-0 md:px-6 interactive-gradient bg-gray-800 text-gray-900 dark:text-white">
    <div class="max-w-4xl mx-auto bg-white dark:bg-gray-800 shadow-lg">
        <!-- Header -->
        <header class="bg-white dark:bg-gray-800 border-b dark:border-gray-700 p-4">
            <div class="flex justify-between items-center">
                <h1 class="text-xl font-bold"><%= user.username %></h1>
                <div class="flex items-center space-x-4">
                    <a href="/upload" class="text-gray-600 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white">
                        <i class="ri-add-box-line text-2xl"></i>
                    </a>
                    <button class="text-gray-600 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white">
                        <i class="ri-menu-line text-2xl"></i>
                    </button>
                </div>
            </div>
        </header>

        <!-- Profile Info -->
        <div class="p-6">
            <div class="flex flex-col md:flex-row items-center md:items-start space-y-4 md:space-y-0 md:space-x-6">
                <div class="w-40 h-40 rounded-full overflow-hidden border-2 border-gray-200 dark:border-gray-700">
                    <img class="profile-image object-cover object-center" src="<%= user.profileImage %>" alt="<%= user.username %>'s profile picture">
                </div>
                <div class="flex-1 text-center md:text-left">
                    <h2 class="text-2xl font-bold mb-1"><%= user.name %></h2>
                    <p class="text-sm text-gray-600 dark:text-gray-400 mb-4"><%= user.bio %></p>
                    <div class="flex justify-center md:justify-start space-x-4 text-sm">
                        <div class="text-center">
                            <span class="font-bold"><%= user.posts.length %></span>
                            <p class="text-gray-600 dark:text-gray-400">Posts</p>
                        </div>
                        <div class="text-center">
                            <a href="/followers/<%= user.username %>" class="hover:underline">
                                <span class="font-bold"><%= user.followers.length %></span>
                                <p class="text-gray-600 dark:text-gray-400">Followers</p>
                            </a>
                        </div>
                        <div class="text-center">
                            <a href="/following/<%= user.username %>" class="hover:underline">
                                <span class="font-bold"><%= user.followings.length %></span>
                                <p class="text-gray-600 dark:text-gray-400">Following</p>
                            </a>
                        </div>
                    </div>
                </div>
            </div>
            <div class="mt-6 flex space-x-4">
                <a href="/edit" class="flex-1 bg-blue-500 hover:bg-blue-600 text-white py-2 px-4 rounded-full text-center transition duration-300">Edit Profile</a>
                <a href="/logout" class="flex-1 bg-gray-200 dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600 text-gray-800 dark:text-white py-2 px-4 rounded-full text-center transition duration-300">Logout</a>
            </div>
        </div>

        <!-- Posts and Videos Grid -->
        <div class="border-t dark:border-gray-700">
            <!-- Toggle buttons -->
            <div class="flex justify-center p-4">
                <button id="showPosts" class="px-4 py-2 bg-blue-500 text-white rounded-l-full">Posts</button>
                <button id="showVideos" class="px-4 py-2 bg-gray-300 text-gray-700 rounded-r-full">Videos</button>
            </div>

            <!-- Posts Grid -->
            <div id="postsGrid" class="grid grid-cols-3 gap-1">
                <!-- Skeleton loader for posts -->
                <% for(let i = 0; i < 9; i++) { %>
                    <div class="aspect-square bg-gray-200 dark:bg-gray-700 animate-pulse"></div>
                <% } %>
            </div>

                     <!-- Videos Grid -->
                     <div id="videosGrid" class="grid grid-cols-3 gap-1 hidden">
                        <!-- Skeleton loader for videos -->
                        <% for(let i = 0; i < 9; i++) { %>
                            <div class="aspect-square bg-gray-200 dark:bg-gray-700 animate-pulse"></div>
                        <% } %>
                    </div>
                </div>

        <!-- Post Modal -->
        <div id="postModal" class="fixed inset-0 bg-black bg-opacity-75 hidden items-center justify-center z-50 modal-transition opacity-0 scale-95">
            <div class="bg-white dark:bg-gray-800 w-full max-w-4xl rounded-lg overflow-hidden shadow-2xl modal-content">
                <div id="modalContent" class="flex flex-col md:flex-row">
                    <!-- Content will be dynamically inserted here -->
                </div>
            </div>
        </div>

        <!-- Video Modal -->
        <div id="videoModal" class="fixed inset-0 bg-black bg-opacity-75 hidden items-center justify-center z-50 modal-transition opacity-0 scale-95">
            <div class="bg-white dark:bg-gray-800 w-full max-w-4xl rounded-lg overflow-hidden shadow-2xl modal-content">
                <div id="videoModalContent" class="flex flex-col md:flex-row">
                    <!-- Content will be dynamically inserted here -->
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script>
        // Interactive gradient background
        const gradientContainer = document.getElementById('gradientContainer');
        
        gradientContainer.addEventListener('mousemove', (e) => {
            const rect = gradientContainer.getBoundingClientRect();
            const x = (e.clientX - rect.left) / rect.width * 100;
            const y = (e.clientY - rect.top) / rect.height * 100;
            
            gradientContainer.style.backgroundPosition = `${x}% ${y}%`;
        });
            
        function handleLike() {
            document.addEventListener("click", function(ev) {
                if (ev.target.classList.contains('like')) {
                    var icon = ev.target;
                    axios.get(`/like/post/${ev.target.dataset.id}`)
                        .then(function(res) {
                            if (icon.classList.contains('ri-heart-3-line')) {
                                icon.classList.remove('ri-heart-3-line');
                                icon.classList.add('ri-heart-3-fill', 'text-red-500');
                            } else {
                                icon.classList.add('ri-heart-3-line');
                                icon.classList.remove('ri-heart-3-fill', 'text-red-500');
                            }
                            const likesElement = icon.closest('.post-actions').querySelector('.likes');
                            likesElement.textContent = `${res.data.likes.length} likes`;
                        })
                        .catch(function(error) {
                            console.error('Error liking post:', error);
                        });
                }
            });
        }

        function handleComment() {
            document.addEventListener("click", function(ev) {
                if (ev.target.classList.contains('comment')) {
                    const postId = ev.target.dataset.id;
                    console.log('Comment icon clicked for post:', postId);
                    
                    // Focus on the comment input
                    const commentInput = document.getElementById('commentInput');
                    if (commentInput) {
                        commentInput.focus();
                    } else {
                        console.error('Comment input not found');
                    }
                }
            });

            // Listen for the form submission
            document.addEventListener("submit", function(ev) {
                if (ev.target.id === 'commentForm') {
                    ev.preventDefault();
                    const commentForm = ev.target;
                    const postId = commentForm.dataset.postId;
                    const commentInput = commentForm.querySelector('#commentInput');
                    
                    if (!postId) {
                        console.error('Post ID not found on comment form');
                        return;
                    }

                    if (!commentInput) {
                        console.error('Comment input not found');
                        return;
                    }

                    const comment = commentInput.value.trim();
                    if (comment) {
                        console.log('Submitting comment for post:', postId);
                        axios.post(`/createcomment/${postId}`, { comment: comment })
                            .then(function(response) {
                                console.log('Comment posted successfully');
                                // Refresh the post modal to show the new comment
                                const postThumbnail = document.querySelector(`.post-thumbnail[data-id="${postId}"]`);
                                if (postThumbnail) {
                                    postThumbnail.click();
                                } else {
                                    console.error('Post thumbnail not found for refreshing');
                                }
                                commentInput.value = '';
                            })
                            .catch(function(error) {
                                console.error('Error posting comment:', error);
                                alert('Failed to post comment. Please try again.');
                            });
                    } else {
                        console.log('Empty comment, not submitting');
                    }
                }
            });
        }

        function handleSave() {
            document.addEventListener("click", function(ev) {
                if (ev.target.classList.contains("save")) {
                    axios.get(`/bookmark/${ev.target.dataset.id}`)
                        .then(function(res) {
                            if (ev.target.classList.contains('ri-bookmark-line')) {
                                ev.target.classList.add('ri-bookmark-fill', 'text-yellow-500');
                                ev.target.classList.remove('ri-bookmark-line');
                            } else {
                                ev.target.classList.remove('ri-bookmark-fill', 'text-yellow-500');
                                ev.target.classList.add('ri-bookmark-line');
                            }
                        })
                        .catch(function(error) {
                            console.error('Error bookmarking post:', error);
                        });
                }
            });
        }

        function handleDelete() {
    document.addEventListener("click", function(ev) {
        if (ev.target.classList.contains('delete-post') || ev.target.classList.contains('delete-video')) {
            const isPost = ev.target.classList.contains('delete-post');
            const id = ev.target.dataset.id;
            const type = isPost ? 'post' : 'video';
            
            if (confirm(`Are you sure you want to delete this ${type}?`)) {
                console.log(`Attempting to delete ${type} with ID:`, id);
                axios.delete(`/${type}/${id}`, {
                    withCredentials: true
                })
                    .then(function(response) {
                        console.log(`${type} deleted successfully`, response.data);
                        // Remove the deleted item from the grid
                        const gridItem = document.querySelector(`.${type}-thumbnail[data-id="${id}"]`);
                        if (gridItem) {
                            gridItem.remove();
                        }
                        // Close the modal if it's open
                        const modal = document.getElementById(`${type}Modal`);
                        if (modal) {
                            modal.click(); // This will trigger the click event on the modal background, closing it
                        }
                        // Update the post/video count
                        updateMediaCount(type, -1);
                    })
                    .catch(function(error) {
                        console.error(`Error deleting ${type}:`, error.response || error);
                        let errorMessage = `Failed to delete ${type}. `;
                        if (error.response) {
                            errorMessage += `Server responded with: ${error.response.status} ${error.response.data.message || error.response.statusText}`;
                        } else if (error.request) {
                            errorMessage += "No response received from the server.";
                        } else {
                            errorMessage += error.message;
                        }
                        alert(errorMessage);
                    });
            }
        }
    });
}

function updateMediaCount(type, change) {
    const countElement = document.querySelector(`.${type}-count`);
    if (countElement) {
        let count = parseInt(countElement.textContent);
        count += change;
        countElement.textContent = count;
    }
}

        function handlePostModal() {
            const modal = document.getElementById('postModal');
            const modalContent = document.getElementById('modalContent');

            document.querySelectorAll('.post-thumbnail').forEach(thumbnail => {
                thumbnail.addEventListener('click', function() {
                    const postId = this.dataset.id;
                    console.log('Fetching post with ID:', postId);
                    axios.get(`/post/${postId}`)
                        .then(response => {
                            const post = response.data;
                            modalContent.innerHTML = `
                                <div class="w-full md:w-2/3 bg-black flex items-center justify-center">
                                    <img src="${post.picture}" alt="Post image" class="post-image">
                                </div>
                                <div class="w-full md:w-1/3 p-6 flex flex-col bg-white dark:bg-gray-800 overflow-y-auto">
                                    <div class="flex items-center justify-between mb-4">
                                        <div class="flex items-center">
                                            <img src="${post.user?.profileImage || '/default-profile.jpg'}" alt="${post.user?.username || 'User'}" class="w-10 h-10 rounded-full mr-3 object-cover">
                                            <span class="font-bold">${post.user?.username || 'Unknown User'}</span>
                                        </div>
                                        <button data-id="${post._id}" class="button delete-post">
                                     <svg
                                       xmlns="http://www.w3.org/2000/svg"
                                       fill="none"
                                       viewBox="0 0 69 14"
                                       class="svgIcon bin-top"
                                     >
                                       <g clip-path="url(#clip0_35_24)">
                                         <path
                                           fill="black"
                                           d="M20.8232 2.62734L19.9948 4.21304C19.8224 4.54309 19.4808 4.75 19.1085 4.75H4.92857C2.20246 4.75 0 6.87266 0 9.5C0 12.1273 2.20246 14.25 4.92857 14.25H64.0714C66.7975 14.25 69 12.1273 69 9.5C69 6.87266 66.7975 4.75 64.0714 4.75H49.8915C49.5192 4.75 49.1776 4.54309 49.0052 4.21305L48.1768 2.62734C47.3451 1.00938 45.6355 0 43.7719 0H25.2281C23.3645 0 21.6549 1.00938 20.8232 2.62734ZM64.0023 20.0648C64.0397 19.4882 63.5822 19 63.0044 19H5.99556C5.4178 19 4.96025 19.4882 4.99766 20.0648L8.19375 69.3203C8.44018 73.0758 11.6746 76 15.5712 76H53.4288C57.3254 76 60.5598 73.0758 60.8062 69.3203L64.0023 20.0648Z"
                                         ></path>
                                       </g>
                                       <defs>
                                         <clipPath id="clip0_35_24">
                                           <rect fill="white" height="14" width="69"></rect>
                                         </clipPath>
                                       </defs>
                                     </svg>
                                
                                     <svg
                                       xmlns="http://www.w3.org/2000/svg"
                                       fill="none"
                                      viewBox="0 0 69 57"
                                       class="svgIcon bin-bottom"
                                     >
                                       <g clip-path="url(#clip0_35_22)">
                                         <path
                                           fill="black"
                                           d="M20.8232 -16.3727L19.9948 -14.787C19.8224 -14.4569 19.4808 -14.25 19.1085 -14.25H4.92857C2.20246 -14.25 0 -12.1273 0 -9.5C0 -6.8727 2.20246 -4.75 4.92857 -4.75H64.0714C66.7975 -4.75 69 -6.8727 69 -9.5C69 -12.1273 66.7975 -14.25 64.0714 -14.25H49.8915C49.5192 -14.25 49.1776 -14.4569 49.0052 -14.787L48.1768 -16.3727C47.3451 -17.9906 45.6355 -19 43.7719 -19H25.2281C23.3645 -19 21.6549 -17.9906 20.8232 -16.3727ZM64.0023 1.0648C64.0397 0.4882 63.5822 0 63.0044 0H5.99556C5.4178 0 4.96025 0.4882 4.99766 1.0648L8.19375 50.3203C8.44018 54.0758 11.6746 57 15.5712 57H53.4288C57.3254 57 60.5598 54.0758 60.8062 50.3203L64.0023 1.0648Z"
                                         ></path>
                                       </g>
                                       <defs>
                                         <clipPath id="clip0_35_22">
                                           <rect fill="white" height="57" width="69"></rect>
                                         </clipPath>
                                       </defs>
                                     </svg>
                                    </button>

                                    </div>
                                    <p class="mb-4 text-sm">${post.caption || ''}</p>
                                    <div class="flex-grow overflow-y-auto comments-container">
                                        ${post.comments && post.comments.length > 0 ? post.comments.map(comment => `
                                            <div class="mb-2 text-sm">
                                                <span class="font-bold">${comment.user?.username || 'Unknown User'}</span>
                                                <span>${comment.comment || ''}</span>
                                            </div>
                                        `).join('') : '<p class="text-gray-500">No comments yet.</p>'}
                                    </div>
                                    <div class="mt-4 post-actions">
                                        <div class="flex items-center justify-between text-2xl mb-2">
                                            <div>
                                                <i data-id="${post._id}" class="like ${post.likes && post.likes.includes('<%= user._id %>') ? 'ri-heart-3-fill text-red-500' : 'ri-heart-3-line'} cursor-pointer hover:text-red-500 transition-colors"></i>
                                                <i data-id="${post._id}" class="comment ri-chat-3-line ml-2 cursor-pointer hover:text-blue-500 transition-colors"></i>
                                                <i class="ri-share-forward-line ml-2 cursor-pointer hover:text-green-500 transition-colors"></i>
                                            </div>
                                            <i data-id="${post._id}" class="save ${post.bookmarks && post.bookmarks.includes('<%= user._id %>') ? 'ri-bookmark-fill text-yellow-500' : 'ri-bookmark-line'} cursor-pointer hover:text-yellow-500 transition-colors"></i>
                                        </div>
                                        <p class="likes font-bold text-sm">${post.likes ? post.likes.length : 0} likes</p>
                                        <p class="text-xs text-gray-500 mt-1">${post.date ? new Date(post.date).toLocaleDateString() : 'Unknown date'}</p>
                                    </div>
                                    <form id="commentForm" class="mt-4" data-post-id="${post._id}">
                                        <input id="commentInput" type="text" placeholder="Add a comment..." class="w-full p-2 border bg-zinc-300 text-black rounded-full focus:outline-none focus:ring-2 focus:ring-blue-500">
                                    </form>
                                </div>
                            `;
                            modal.classList.remove('hidden');
                            modal.classList.add('flex');
                            setTimeout(() => {
                                modal.classList.remove('opacity-0', 'scale-95');
                                modal.classList.add('opacity-100', 'scale-100');
                            }, 10);
                        })
                        .catch(error => {
                            console.error('Error fetching post details:', error.response || error);
                            let errorMessage = 'An error occurred while fetching the post.';
                            if (error.response && error.response.status === 404) {
                                errorMessage = 'Post not found. It may have been deleted.';
                            }
                            modalContent.innerHTML = `
                                <div class="p-6 text-center">
                                    <p class="text-red-500">${errorMessage}</p>
                                </div>
                            `;
                            modal.classList.remove('hidden');
                            modal.classList.add('flex');
                        });
                });
            });

            modal.addEventListener('click', function(e) {
                if (e.target === modal) {
                    modal.classList.remove('opacity-100', 'scale-100');
                    modal.classList.add('opacity-0', 'scale-95');
                    setTimeout(() => {
                        modal.classList.add('hidden');
                        modal.classList.remove('flex');
                    }, 300);
                }
            });
        }

        function handleToggle() {
            const postsGrid = document.getElementById('postsGrid');
            const videosGrid = document.getElementById('videosGrid');
            const showPostsBtn = document.getElementById('showPosts');
            const showVideosBtn = document.getElementById('showVideos');

            showPostsBtn.addEventListener('click', () => {
                postsGrid.classList.remove('hidden');
                videosGrid.classList.add('hidden');
                showPostsBtn.classList.add('bg-blue-500', 'text-white');
                showPostsBtn.classList.remove('bg-gray-300', 'text-gray-700');
                showVideosBtn.classList.add('bg-gray-300', 'text-gray-700');
                showVideosBtn.classList.remove('bg-blue-500', 'text-white');
            });

            showVideosBtn.addEventListener('click', () => {
                postsGrid.classList.add('hidden');
                videosGrid.classList.remove('hidden');
                showVideosBtn.classList.add('bg-blue-500', 'text-white');
                showVideosBtn.classList.remove('bg-gray-300', 'text-gray-700');
                showPostsBtn.classList.add('bg-gray-300', 'text-gray-700');
                showPostsBtn.classList.remove('bg-blue-500', 'text-white');
            });
        }

        function handleVideoLike() {
            document.addEventListener("click", function(ev) {
                if (ev.target.classList.contains('video-like')) {
                    var icon = ev.target;
                    axios.get(`/like/reel/${ev.target.dataset.id}`)
                        .then(function(res) {
                            if (icon.classList.contains('ri-heart-3-line')) {
                                icon.classList.remove('ri-heart-3-line');
                                icon.classList.add('ri-heart-3-fill', 'text-red-500');
                            } else {
                                icon.classList.add('ri-heart-3-line');
                                icon.classList.remove('ri-heart-3-fill', 'text-red-500');
                            }
                            const likesElement = icon.closest('.video-actions').querySelector('.likes');
                            likesElement.textContent = `${res.data.likes.length} likes`;
                        })
                        .catch(function(error) {
                            console.error('Error liking video:', error);
                        });
                }
            });
        }

        function handleVideoComment() {
            document.addEventListener("submit", function(ev) {
                if (ev.target.id === 'videoCommentForm') {
                    ev.preventDefault();
                    const commentForm = ev.target;
                    const videoId = commentForm.dataset.videoId;
                    const commentInput = commentForm.querySelector('#videoCommentInput');
                    
                    if (!videoId || !commentInput) {
                        console.error('Video ID or comment input not found');
                        return;
                    }

                    const comment = commentInput.value.trim();
                    if (comment) {
                        console.log('Submitting comment for video:', videoId);
                        axios.post(`/commentreel/${videoId}`, { comment: comment })
                            .then(function(response) {
                                console.log('Comment posted successfully');
                                // Refresh the video modal to show the new comment
                                const videoThumbnail = document.querySelector(`.video-thumbnail[data-id="${videoId}"]`);
                                if (videoThumbnail) {
                                    videoThumbnail.click();
                                } else {
                                    console.error('Video thumbnail not found for refreshing');
                                }
                                commentInput.value = '';
                            })
                            .catch(function(error) {
                                console.error('Error posting comment:', error);
                                alert('Failed to post comment. Please try again.');
                            });
                    } else {
                        console.log('Empty comment, not submitting');
                    }
                }
            });
        }

        function handleVideoModal() {
            const modal = document.getElementById('videoModal');
            const modalContent = document.getElementById('videoModalContent');

            document.querySelectorAll('.video-thumbnail').forEach(thumbnail => {
                thumbnail.addEventListener('click', function() {
                    const videoId = this.dataset.id;
                    console.log('Fetching video with ID:', videoId);
                    axios.get(`/video/${videoId}`)
                        .then(response => {
                            const video = response.data;
                            modalContent.innerHTML = `
                                <div class="w-full md:w-2/3 bg-black flex items-center justify-center">
                                    <video src="${video.source}" controls class="video-player"></video>
                                </div>
                                <div class="w-full md:w-1/3 p-6 flex flex-col bg-white dark:bg-gray-800 overflow-y-auto">
                                    <div class="flex items-center justify-between mb-4">
                                        <div class="flex items-center">
                                            <img src="${video.user?.profileImage || '/default-profile.jpg'}" alt="${video.user?.username || 'User'}" class="w-10 h-10 rounded-full mr-3 object-cover">
                                            <span class="font-bold">${video.user?.username || 'Unknown User'}</span>
                                        </div>
                                         <button data-id="${video._id}" class="button delete-video">
                                     <svg
                                       xmlns="http://www.w3.org/2000/svg"
                                       fill="none"
                                       viewBox="0 0 69 14"
                                       class="svgIcon bin-top"
                                     >
                                       <g clip-path="url(#clip0_35_24)">
                                         <path
                                           fill="black"
                                           d="M20.8232 2.62734L19.9948 4.21304C19.8224 4.54309 19.4808 4.75 19.1085 4.75H4.92857C2.20246 4.75 0 6.87266 0 9.5C0 12.1273 2.20246 14.25 4.92857 14.25H64.0714C66.7975 14.25 69 12.1273 69 9.5C69 6.87266 66.7975 4.75 64.0714 4.75H49.8915C49.5192 4.75 49.1776 4.54309 49.0052 4.21305L48.1768 2.62734C47.3451 1.00938 45.6355 0 43.7719 0H25.2281C23.3645 0 21.6549 1.00938 20.8232 2.62734ZM64.0023 20.0648C64.0397 19.4882 63.5822 19 63.0044 19H5.99556C5.4178 19 4.96025 19.4882 4.99766 20.0648L8.19375 69.3203C8.44018 73.0758 11.6746 76 15.5712 76H53.4288C57.3254 76 60.5598 73.0758 60.8062 69.3203L64.0023 20.0648Z"
                                         ></path>
                                       </g>
                                       <defs>
                                         <clipPath id="clip0_35_24">
                                           <rect fill="white" height="14" width="69"></rect>
                                         </clipPath>
                                       </defs>
                                     </svg>
                                
                                     <svg
                                       xmlns="http://www.w3.org/2000/svg"
                                       fill="none"
                                      viewBox="0 0 69 57"
                                       class="svgIcon bin-bottom"
                                     >
                                       <g clip-path="url(#clip0_35_22)">
                                         <path
                                           fill="black"
                                           d="M20.8232 -16.3727L19.9948 -14.787C19.8224 -14.4569 19.4808 -14.25 19.1085 -14.25H4.92857C2.20246 -14.25 0 -12.1273 0 -9.5C0 -6.8727 2.20246 -4.75 4.92857 -4.75H64.0714C66.7975 -4.75 69 -6.8727 69 -9.5C69 -12.1273 66.7975 -14.25 64.0714 -14.25H49.8915C49.5192 -14.25 49.1776 -14.4569 49.0052 -14.787L48.1768 -16.3727C47.3451 -17.9906 45.6355 -19 43.7719 -19H25.2281C23.3645 -19 21.6549 -17.9906 20.8232 -16.3727ZM64.0023 1.0648C64.0397 0.4882 63.5822 0 63.0044 0H5.99556C5.4178 0 4.96025 0.4882 4.99766 1.0648L8.19375 50.3203C8.44018 54.0758 11.6746 57 15.5712 57H53.4288C57.3254 57 60.5598 54.0758 60.8062 50.3203L64.0023 1.0648Z"
                                         ></path>
                                       </g>
                                       <defs>
                                         <clipPath id="clip0_35_22">
                                           <rect fill="white" height="57" width="69"></rect>
                                         </clipPath>
                                       </defs>
                                     </svg>
                                    </button>
                                    </div>
                                    <p class="mb-4 text-sm">${video.caption || ''}</p>
                                    <div class="flex-grow overflow-y-auto comments-container">
                                        ${video.comments && video.comments.length > 0 ? video.comments.map(comment => `
                                            <div class="mb-2 text-sm">
                                                <span class="font-bold">${comment.user?.username || 'Unknown User'}</span>
                                                <span>${comment.comment || ''}</span>
                                            </div>
                                        `).join('') : '<p class="text-gray-500">No comments yet.</p>'}
                                    </div>
                                    <div class="mt-4 video-actions">
                                        <div class="flex items-center justify-between text-2xl mb-2">
                                            <div>
                                                <i data-id="${video._id}" class="video-like ${video.likes && video.likes.includes('<%= user._id %>') ? 'ri-heart-3-fill text-red-500' : 'ri-heart-3-line'} cursor-pointer hover:text-red-500 transition-colors"></i>
                                                <i data-id="${video._id}" class="video-comment ri-chat-3-line ml-2 cursor-pointer hover:text-blue-500 transition-colors"></i>
                                                <i class="ri-share-forward-line ml-2 cursor-pointer hover:text-green-500 transition-colors"></i>
                                            </div>
                                            <i data-id="${video._id}" class="video-save ${video.bookmarks && video.bookmarks.includes('<%= user._id %>') ? 'ri-bookmark-fill text-yellow-500' : 'ri-bookmark-line'} cursor-pointer hover:text-yellow-500 transition-colors"></i>
                                        </div>
                                        <p class="likes font-bold text-sm">${video.likes ? video.likes.length : 0} likes</p>
                                        <p class="text-xs text-gray-500 mt-1">${video.date ? new Date(video.date).toLocaleDateString() : 'Unknown date'}</p>
                                    </div>
                                    <form id="videoCommentForm" class="mt-4" data-video-id="${video._id}">
                                        <input id="videoCommentInput" type="text" placeholder="Add a comment..." class="w-full p-2 border bg-zinc-300 text-black rounded-full focus:outline-none focus:ring-2 focus:ring-blue-500">
                                    </form>
                                </div>
                            `;
                            modal.classList.remove('hidden');
                            modal.classList.add('flex');
                            setTimeout(() => {
                                modal.classList.remove('opacity-0', 'scale-95');
                                modal.classList.add('opacity-100', 'scale-100');
                            }, 10);

                            // Stop other videos from playing when a new one is opened
                            document.querySelectorAll('.video-player').forEach(player => {
                                if (player.src !== video.source) {
                                    player.pause();
                                }
                            });
                        })
                        .catch(error => {
                            console.error('Error fetching video details:', error.response || error);
                            let errorMessage = 'An error occurred while fetching the video.';
                            if (error.response && error.response.status === 404) {
                                errorMessage = 'Video not found. It may have been deleted.';
                            }
                            modalContent.innerHTML = `
                                <div class="p-6 text-center">
                                    <p class="text-red-500">${errorMessage}</p>
                                </div>
                            `;
                            modal.classList.remove('hidden');
                            modal.classList.add('flex');
                        });
                });
            });

            modal.addEventListener('click', function(e) {
                if (e.target === modal) {
                    modal.classList.remove('opacity-100', 'scale-100');
                    modal.classList.add('opacity-0', 'scale-95');
                    setTimeout(() => {
                        modal.classList.add('hidden');
                        modal.classList.remove('flex');
                        // Pause the video when closing the modal
                        const videoPlayer = modal.querySelector('.video-player');
                        if (videoPlayer) {
                            videoPlayer.pause();
                        }
                    }, 300);
                }
            });
        }

        function loadPosts() {
            const postsGrid = document.getElementById('postsGrid');
            axios.get('/api/posts')
                .then(response => {
                    const posts = response.data;
                    postsGrid.innerHTML = posts.map(post => `
                        <div class="aspect-square overflow-hidden cursor-pointer post-thumbnail" data-id="${post._id}">
                            <img class="w-full h-full object-cover" src="${post.picture}" alt="Post image" loading="lazy">
                        </div>
                    `).join('');
                    handlePostModal(); // Reattach event listeners
                })
                .catch(error => {
                    console.error('Error loading posts:', error);
                    postsGrid.innerHTML = '<p class="col-span-3 text-center text-red-500">Failed to load posts</p>';
                });
        }

        function loadVideos() {
            const videosGrid = document.getElementById('videosGrid');
            axios.get('/api/videos')
                .then(response => {
                    const videos = response.data;
                    videosGrid.innerHTML = videos.map(video => `
                        <div class="aspect-square overflow-hidden cursor-pointer video-thumbnail" data-id="${video._id}">
                            <video class="w-full h-full object-cover" src="${video.source}" muted loop></video>
                        </div>
                    `).join('');
                    handleVideoModal(); // Reattach event listeners
                })
                .catch(error => {
                    console.error('Error loading videos:', error);
                    videosGrid.innerHTML = '<p class="col-span-3 text-center text-red-500">Failed to load videos</p>';
                });
        }

        function handleToggle() {
            const postsGrid = document.getElementById('postsGrid');
            const videosGrid = document.getElementById('videosGrid');
            const showPostsBtn = document.getElementById('showPosts');
            const showVideosBtn = document.getElementById('showVideos');

            showPostsBtn.addEventListener('click', () => {
                postsGrid.classList.remove('hidden');
                videosGrid.classList.add('hidden');
                showPostsBtn.classList.add('bg-blue-500', 'text-white');
                showPostsBtn.classList.remove('bg-gray-300', 'text-gray-700');
                showVideosBtn.classList.add('bg-gray-300', 'text-gray-700');
                showVideosBtn.classList.remove('bg-blue-500', 'text-white');
                if (!postsGrid.querySelector('.post-thumbnail')) {
                    loadPosts();
                }
            });

            showVideosBtn.addEventListener('click', () => {
                postsGrid.classList.add('hidden');
                videosGrid.classList.remove('hidden');
                showVideosBtn.classList.add('bg-blue-500', 'text-white');
                showVideosBtn.classList.remove('bg-gray-300', 'text-gray-700');
                showPostsBtn.classList.add('bg-gray-300', 'text-gray-700');
                showPostsBtn.classList.remove('bg-blue-500', 'text-white');
                if (!videosGrid.querySelector('.video-thumbnail')) {
                    loadVideos();
                }
            });
        }
        
        // Initialize all functions
        handleLike();
        handleComment();
        handleSave();
        handlePostModal();
        handleToggle();
        handleVideoModal();
        handleVideoLike();
        handleVideoComment();
        handleDelete();
        loadPosts();
    </script>
<% include ./partials/footer.ejs %>
