<% include ./partials/header.ejs %>

<div class="w-full h-screen bg-zinc-900 overflow-hidden">
  <div class="w-full h-full relative">
    <div class="reels-container w-full h-full overflow-y-scroll snap-y snap-mandatory">
      <% reels.reverse().forEach(function(elem){ %>
        <div class="reel-slide w-full h-screen snap-start relative flex justify-center items-center">
          <div class="video-container w-full max-w-md h-full relative">
            <video data-id="<%= elem._id %>" class="w-full h-full object-cover" src="<%= elem.source%>" loop ></video>
            <button class="mute-button absolute top-4 right-4 text-white text-2xl z-10">
              <i class="ri-volume-up-fill"></i>
            </button>
            <div class="absolute top-0 left-0 w-full h-full bg-gradient-to-b from-transparent to-black opacity-50"></div>
            <div class="absolute bottom-0 left-0 w-full p-6">
              <div class="flex items-center gap-4 mb-4">
                <div class="w-12 h-12 rounded-full overflow-hidden border-2 border-white">
                  <img class="w-full h-full object-cover" src="<%= elem.user.profileImage %>" loading="lazy" alt="<%= elem.user.username %>'s profile">
                </div>
                <a href="/userprofile/<%= elem.user.username %>" class="text-white text-lg font-semibold"><%= elem.user.username %></a>
              </div>
              <p class="text-white text-sm mb-4"><%= elem.caption%></p>
              <div class="flex justify-between items-center">
                <div class="flex gap-6">
                  <button class="like text-white text-2xl" data-id="<%= elem._id %>">
                    <i class="<%= elem.likes.indexOf(user.id) === -1 ? 'ri-heart-3-line' : 'text-red-500 ri-heart-3-fill' %>"></i>
                  </button>
                  <a href="/comment/reel/<%= elem._id %>" class="text-white text-2xl"><i class="ri-chat-3-line"></i></a>
                  <button class="text-white text-2xl"><i class="ri-share-circle-line"></i></button>
                </div>
                <a href="/liked/reel/<%= elem._id %>" class="text-white text-sm font-semibold"><%= elem.likes.length%> likes</a>
              </div>
            </div>
          </div>
        </div>
      <% }) %>
    </div>
    <div id="loading" class="w-full text-center text-white py-4">Loading...</div>
  </div>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/axios/1.6.7/axios.min.js"
  integrity="sha512-NQfB/bDaB8kaSXF8E77JjhHG5PM6XVRxvHzkZiwl3ddWCEPBa23T76MuWSwAJdMGJnmQqM0VeY9kFszsrBEFrQ=="
  crossorigin="anonymous" referrerpolicy="no-referrer"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.5/gsap.min.js"
  integrity="sha512-7eHRwcbYkK4d9g/6tD/mhkf++eoTHwpNM9woBxtPUBWm67zeAfFC+HrdoE2GanKeocly/VxeLvIqwvCdk7qScg=="
  crossorigin="anonymous" referrerpolicy="no-referrer"></script>
<script>
  let page = 1;
  let loading = false;
  let noMoreReels = false;
  let initialReels = [];
  const user = <%- JSON.stringify(user) %>; // Pass the user variable to the client-side script

  function handleLike() {
    document.querySelector(".reels-container").addEventListener("click", function (ev) {
      if (ev.target.closest('.like')) {
        var icon = ev.target.closest('.like').querySelector('i');
        var postId = ev.target.closest('.like').dataset.id;

        axios(`/like/reel/${postId}`)
          .then(function (res) {
            if (icon.classList.contains('ri-heart-3-line')) {
              icon.classList.remove('ri-heart-3-line');
              icon.classList.add('ri-heart-3-fill', 'text-red-500');
            } else {
              icon.classList.add('ri-heart-3-line');
              icon.classList.remove('ri-heart-3-fill', 'text-red-500');
            }
            ev.target.closest('.reel-slide').querySelector('a[href^="/liked/reel/"]').textContent = res.data.likes.length + ' likes';
          });
      }
    });
  }

  function makeHeartAnimation() {
    document.querySelector(".reels-container").addEventListener("dblclick", function (ev) {
      if (ev.target.tagName === 'VIDEO') {
        var icon = document.createElement('i');
        icon.classList.add('ri-heart-3-fill', 'text-7xl', 'text-red-500', 'absolute', 'top-1/2', 'left-1/2', '-translate-x-1/2', '-translate-y-1/2', 'z-50');
        ev.target.parentNode.appendChild(icon);

        axios.get(`/like/reel/${ev.target.dataset.id}`)
          .then(function (response) {
            var iconElement = ev.target.parentNode.querySelector('.like i');
            if (iconElement.classList.contains('ri-heart-3-line')) {
              iconElement.classList.remove('ri-heart-3-line');
              iconElement.classList.add('ri-heart-3-fill', 'text-red-500');
            }

            var likes = ev.target.parentNode.querySelector("a[href^='/liked/reel/']");
            if (response.data && response.data.likes) {
              likes.textContent = response.data.likes.length + ' likes';
            }
          })
          .catch(function (error) {
            console.error('Error:', error);
          });

        gsap.fromTo(icon, 
          { scale: 0, opacity: 0 },
          { 
            scale: 1, 
            opacity: 1, 
            duration: 0.3, 
            ease: 'back.out(1.7)',
            onComplete: function () {
              gsap.to(icon, {
                scale: 0,
                opacity: 0,
                delay: 0.5,
                duration: 0.3,
                onComplete: function () {
                  icon.remove();
                }
              });
            }
          }
        );
      }
    });
  }

  function handleVideoPlayback() {
    document.querySelectorAll('video').forEach(video => {
      video.addEventListener('play', function () {
        document.querySelectorAll('video').forEach(v => {
          if (v !== video) v.pause();
        });
      });
    });
  }

  function handleVideoMute() {
    document.querySelectorAll('.mute-button').forEach(button => {
      button.addEventListener('click', function () {
        const video = button.closest('.video-container').querySelector('video');
        const icon = button.querySelector('i');
        
        video.muted = !video.muted;
        
        if (video.muted) {
          icon.classList.remove('ri-volume-up-fill');
          icon.classList.add('ri-volume-mute-fill');
        } else {
          icon.classList.remove('ri-volume-mute-fill');
          icon.classList.add('ri-volume-up-fill');
        }
      });
    });
  }

  function handleVideoClick() {
    document.querySelector(".reels-container").addEventListener("click", function (ev) {
      if (ev.target.tagName === 'VIDEO') {
        const video = ev.target;
        const muteButton = ev.target.closest('.video-container').querySelector('.mute-button');
        const icon = muteButton.querySelector('i');
        
        video.muted = !video.muted;
        
        if (video.muted) {
          icon.classList.remove('ri-volume-up-fill');
          icon.classList.add('ri-volume-mute-fill');
        } else {
          icon.classList.remove('ri-volume-mute-fill');
          icon.classList.add('ri-volume-up-fill');
        }
      }
    });
  }

  function fetchMoreReels() {
    if (loading) return;
    loading = true;
    document.getElementById('loading').style.display = 'block';
    console.log('Fetching more reels...');

    const endpoint = noMoreReels ? '/random-reels' : `/reels?page=${page}`;

    axios.get(endpoint)
      .then(function (response) {
        console.log('Reels fetched:', response.data.reels);
        const reelsContainer = document.querySelector('.reels-container');

        if (response.data.reels.length === 0) {
          noMoreReels = true;
          fetchMoreReels();
          return;
        }

        response.data.reels.forEach(function (elem) {
          const reelSlide = document.createElement('div');
          reelSlide.classList.add('reel-slide', 'w-full', 'h-screen', 'snap-start', 'relative', 'flex', 'justify-center', 'items-center');
          reelSlide.innerHTML = `
            <div class="video-container w-full max-w-md h-full relative">
              <video data-id="${elem._id}" class="w-full h-full object-cover" src="${elem.source}" loop></video>
              <button class="mute-button absolute top-4 right-4 text-white text-2xl z-10">
                <i class="ri-volume-up-fill"></i>
              </button>
              <div class="absolute top-0 left-0 w-full h-full bg-gradient-to-b from-transparent to-black opacity-50"></div>
              <div class="absolute bottom-0 left-0 w-full p-6">
                <div class="flex items-center gap-4 mb-4">
                  <div class="w-12 h-12 rounded-full overflow-hidden border-2 border-white">
                    <img class="w-full h-full object-cover" src="${elem.user.profileImage}" loading="lazy" alt="${elem.user.username}'s profile">
                  </div>
                  <a href="/userprofile/${elem.user.username}" class="text-white text-lg font-semibold">${elem.user.username}</a>
                </div>
                <p class="text-white text-sm mb-4">${elem.caption}</p>
                <div class="flex justify-between items-center">
                  <div class="flex gap-6">
                    <button class="like text-white text-2xl" data-id="${elem._id}">
                      <i class="${elem.likes.indexOf(user._id) === -1 ? 'ri-heart-3-line' : 'text-red-500 ri-heart-3-fill'}"></i>
                    </button>
                    <a href="/comment/reel/${elem._id}" class="text-white text-2xl"><i class="ri-chat-3-line"></i></a>
                    <button class="text-white text-2xl"><i class="ri-share-circle-line"></i></button>
                  </div>
                  <a href="/liked/reel/${elem._id}" class="text-white text-sm font-semibold">${elem.likes.length} likes</a>
                </div>
              </div>
            </div>
          `;
          reelsContainer.appendChild(reelSlide);
        });

        page++;
        loading = false;
        document.getElementById('loading').style.display = 'none';
        handleVideoPlayback();
        handleVideoMute();
      })
      .catch(function (error) {
        console.error('Error fetching more reels:', error);
        loading = false;
        document.getElementById('loading').style.display = 'none';
      });
  }

  function cloneInitialReels() {
    const reelsContainer = document.querySelector('.reels-container');
    initialReels.forEach(reel => {
      const clone = reel.cloneNode(true);
      reelsContainer.appendChild(clone);
    });
  }

  document.querySelector('.reels-container').addEventListener('scroll', function () {
    const container = document.querySelector('.reels-container');
    console.log('Scroll event:', container.scrollTop + container.clientHeight, container.scrollHeight);
    if (container.scrollTop + container.clientHeight >= container.scrollHeight - 100) {
      if (noMoreReels) {
        cloneInitialReels();
      } else {
        fetchMoreReels();
      }
    }
  });

  document.addEventListener('DOMContentLoaded', function () {
    initialReels = Array.from(document.querySelectorAll('.reel-slide'));
  });

  handleLike();
  makeHeartAnimation();
  handleVideoPlayback();
  handleVideoMute();
  handleVideoClick();
</script>

<% include ./partials/footer.ejs %>