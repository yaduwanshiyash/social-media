<% include ./partials/header.ejs %>
<div class="w-full bg-zinc-900">
  <div class="w-full md:w-[40vw] md:mx-auto min-h-screen bg-white dark:bg-zinc-900 text-zinc-950 dark:text-white py-5">
    <div class="w-full px-4 flex items-center justify-between">
      <img class="w-1/4 hover:opacity-80 transition-opacity duration-300" src="/images/logo.png" alt="">
      <div class="icons -mt-2 flex gap-5 items-center">
        <div class="relative flex items-center">
          <div class="relative">
            <i class="hover:text-red-500 transition-colors duration-300 text-[1.4rem] ri-notification-3-line cursor-pointer" id="notificationIcon"></i>
            <span id="notificationCount" class="absolute -top-2 -right-2 bg-red-500 text-white text-xs rounded-full h-5 w-5 flex items-center justify-center"></span>
          </div>
          <div id="notificationDropdown" class="hidden absolute right-0 mt-0 top-7 w-80 bg-white dark:bg-zinc-800 rounded-md shadow-lg z-50 max-h-[80vh] overflow-y-auto">
            <div class="p-4 border-b dark:border-zinc-700">
              <h3 class="text-lg font-semibold">Notifications</h3>
            </div>
            <div id="notificationList">
              <!-- Notifications will be populated here -->
            </div>
            <div id="loadMoreContainer" class="p-4 text-center hidden">
              <button id="loadMoreButton" class="text-blue-500 hover:text-blue-700">Load More</button>
            </div>
          </div>
        </div>
        <a href="/chat" class="hover:text-blue-500 transition-colors duration-300"><i class="text-[1.4rem] ri-messenger-line"></i></a>
      </div>
    </div>
    <div class="story px-3 flex gap-3 overflow-auto mt-5">
      <a href="/story/0" class="hover:scale-105 transition-transform duration-300">
        <div class="circle flex-shrink-0">
          <div class="gradient w-[18vw] h-[18vw] md:w-[5vw] md:h-[5vw] bg-sky-100 rounded-full bg-gradient-to-r from-purple-700 to-orange-500 flex items-center justify-center">
            <div class="inner w-[92%] h-[92%] rounded-full overflow-hidden">
              <img class="w-full h-full object-cover" src="<%= user.profileImage %>" loading="lazy" alt="">
            </div>
          </div>
        </div>
      </a>

      <% stories.forEach(function(elem){ %>
        <a href="/story/<%= elem.user._id %>/0" class="hover:scale-105 transition-transform duration-300">
          <div class="circle flex-shrink-0">
            <div class="gradient w-[18vw] h-[18vw] md:w-[5vw] md:h-[5vw] bg-sky-100 rounded-full bg-gradient-to-r from-purple-700 to-orange-500 flex items-center justify-center">
              <div class="inner w-[92%] h-[92%] rounded-full overflow-hidden">
                <img class="w-full h-full object-cover" src="<%= elem.user.profileImage %>" loading="lazy" alt="">
              </div>
            </div>
          </div>
        </a>
      <% }) %>
    </div>
    <div class="posts mb-20">
      <% postsAndReels.reverse().forEach(function(elem){ %>
        <div class="post mt-10 w-full min-h-[50vh]">
          <div class="title px-4 flex items-center gap-2">
            <div class="w-[8vw] h-[8vw] md:w-[3vw] md:h-[3vw] rounded-full overflow-hidden">
              <img class="w-full h-full object-cover hover:opacity-80 transition-opacity duration-300" src="<%= elem.user.profileImage %>" loading="lazy" alt="">
            </div>
            <a href="/userprofile/<%= elem.user.username %>" class="hover:underline"><h4 class="text-sm"><%= elem.user.username %></h4></a>
            <% if (elem.date) { %>
              <h6 class="text-xs opacity-80 dark:opacity-30">
                <%= new Date(elem.date).toLocaleDateString('en-US', { year: 'numeric', month: 'short', day: 'numeric' }) %>
              </h6>
            <% } else if (elem.publishedAt) { %>
              <h6 class="text-xs opacity-80 dark:opacity-30">
                <%= new Date(elem.publishedAt).toLocaleDateString('en-US', { year: 'numeric', month: 'short', day: 'numeric' }) %>
              </h6>
            <% } %>
          </div>
          <div class="w-full h-full rounded-lg px-2 overflow-hidden mt-4">
            <% if (elem.picture) { %>
              <img data-id="<%= elem._id %>" class="postimg rounded-lg hover:scale-105 transition-transform duration-300" src="<%= elem.picture %>" loading="lazy" alt="Post Image">
            <% } else if (elem.source) { %>
              <video data-id="<%= elem._id %>" preload="none" width="300" loop muted controls src="<%= elem.source %>" class="lazy-video w-full video-hai rounded-md mb-4 hover:scale-105 transition-transform duration-300"></video>
            <% } %>
          </div>
          <div class="options w-full px-4 flex justify-between items-center text-[1.4rem]">
            <div class="flex gap-3 mt-2">
              <% if (elem.picture) { %>
                <i data-id="<%= elem._id %>" class="like <%= elem.likes && elem.likes.includes(user._id) === -1 ? 'ri-heart-3-line' : 'text-red-500 ri-heart-3-fill' %> hover:text-red-500 transition-colors duration-300"></i>
              <% } else if (elem.source) { %>
                <i data-id="<%= elem._id %>" class="reel <%= elem.likes.indexOf(user.id) === -1 ? 'ri-heart-3-line' : 'text-red-500 ri-heart-3-fill' %> hover:text-red-500 transition-colors duration-300"></i>
              <% } %>
              <% if (elem.picture) { %>
                <a href="/comment/<%= elem._id %>" class="hover:text-blue-500 transition-colors duration-300"><i class="ri-chat-3-line"></i></a>
              <% } else if (elem.source) { %>
                <a href="/comment/reel/<%= elem._id %>" class="hover:text-blue-500 transition-colors duration-300"><i class="ri-chat-3-line"></i></a>
              <% } %>
              <i class="ri-share-circle-line hover:text-green-500 transition-colors duration-300"></i>
            </div>
            <% if (elem.bookmark) { %>
              <i data-id="<%= elem._id %>" class="save <%= user.bookmarks.indexOf(elem._id) === -1 ? 'ri-bookmark-line' : 'ri-bookmark-fill text-white' %> hover:text-yellow-500 transition-colors duration-300"></i>
            <% } %>
          </div>
          <% if (elem.picture) { %>
            <a href="/liked/post/<%= elem._id %>" class="hover:underline"><h3 class="likes px-4 mt-2 text-sm leading-none tracking-tight"><%= elem.likes.length %> likes</h3></a>
          <% } else if (elem.source) { %>
            <a href="/liked/reel/<%= elem._id %>" class="hover:underline"><h3 class="likes px-4 mt-2 text-sm leading-none tracking-tight"><%= elem.likes.length %> likes</h3></a>
          <% } %>
          <h2 class="dark:text-white text-black text-sm px-4 font-semibold mt-2"><%= elem.caption %></h2>
          <% if (elem.date) { %>
            <p class="px-4 text-xs dark:text-white text-black">
              <%= new Date(elem.date).toLocaleTimeString('en-US') %>
            </p>
          <% } else if (elem.publishedAt) { %>
            <p class="px-4 text-xs dark:text-white text-black">
              <%= new Date(elem.publishedAt).toLocaleTimeString('en-US') %>
            </p>
          <% } %>
        </div>
      <% }) %>
    </div>
  </div>
</div>
<script src="https://cdnjs.cloudflare.com/ajax/libs/axios/1.6.7/axios.min.js" integrity="sha512-NQfB/bDaB8kaSXF8E77JjhHG5PM6XVRxvHzkZiwl3ddWCEPBa23T76MuWSwAJdMGJnmQqM0VeY9kFszsrBEFrQ==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.5/gsap.min.js" integrity="sha512-7eHRwcbYkK4d9g/6tD/mhkf++eoTHwpNM9woBxtPUBWm67zeAfFC+HrdoE2GanKeocly/VxeLvIqwvCdk7qScg==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
<script>
document.addEventListener('DOMContentLoaded', function() {
  const notificationIcon = document.getElementById('notificationIcon');
  const notificationDropdown = document.getElementById('notificationDropdown');
  const notificationCount = document.getElementById('notificationCount');
  const notificationList = document.getElementById('notificationList');
  const loadMoreContainer = document.getElementById('loadMoreContainer');
  const loadMoreButton = document.getElementById('loadMoreButton');

  let currentPage = 1;

  notificationIcon.addEventListener('click', function() {
    notificationDropdown.classList.toggle('hidden');
    if (!notificationDropdown.classList.contains('hidden')) {
      fetchNotifications();
    }
  });

  loadMoreButton.addEventListener('click', function() {
    fetchNotifications(currentPage + 1);
  });
  

  function updateNotificationCount(count) {
    if (count > 0) {
      notificationCount.textContent = count > 99 ? '99+' : count;
      notificationCount.classList.remove('hidden');
    } else {
      notificationCount.classList.add('hidden');
    }
  }

  function fetchNotifications(page = 1) {
  axios.get(`/notifications?page=${page}`)
    .then(function(response) {
      if (Array.isArray(response.data.notifications)) {
        renderNotifications(response.data.notifications, page === 1);
        updateNotificationCount(count => response.data.unreadCount);
        currentPage = page;
        loadMoreContainer.classList.toggle('hidden', !response.data.hasNextPage);
      } else {
        console.error('Unexpected response structure:', response.data);
        notificationList.innerHTML = '<p class="p-4 text-center">Error loading notifications</p>';
      }
    })
    .catch(function(error) {
      console.error('Error fetching notifications:', error);
      notificationList.innerHTML = '<p class="p-4 text-center">Error loading notifications</p>';
    });
}

  function renderNotifications(notifications, clearExisting = true) {
  if (clearExisting) {
    notificationList.innerHTML = '';
  }
  if (notifications.length === 0) {
    notificationList.innerHTML = '<p class="p-4 text-center">No new notifications</p>';
  } else {
    notifications.forEach(function(notification) {
      const notificationElement = document.createElement('div');
      notificationElement.className = 'p-4 border-b dark:border-zinc-700 hover:bg-gray-100 dark:hover:bg-zinc-700 transition-colors duration-200';
      notificationElement.innerHTML = `
        <div class="flex items-start justify-between">
          <div class="flex items-start">
            <img src="${notification.sender.profileImage}" alt="${notification.sender.username}" class="w-10 object-cover object-center h-10 rounded-full mr-3">
            <div>
              <p class="text-sm font-medium">${getNotificationMessage(notification)}</p>
              <p class="text-xs text-gray-500 dark:text-gray-400 mt-1">${formatDate(notification.createdAt)}</p>
            </div>
          </div>
          <div class="flex items-center">
            ${!notification.isRead ? `<button class="mark-read text-xs text-blue-500 hover:text-blue-700 mr-2" data-id="${notification._id}">Mark as Read</button>` : ''}
            <button class="delete-notification text-xs text-red-500 hover:text-red-700" data-id="${notification._id}">Delete</button>
          </div>
        </div>
      `;
      notificationList.appendChild(notificationElement);
    });
  }
}

  function getNotificationMessage(notification) {
    switch(notification.type) {
      case 'like':
        return `<span class="font-semibold">${notification.sender.username}</span> liked your post`;
      case 'comment':
        return `<span class="font-semibold">${notification.sender.username}</span> commented on your post`;
      case 'follow':
        return `<span class="font-semibold">${notification.sender.username}</span> started following you`;
      default:
        return notification.message || 'You have a new notification';
    }
  }

  function formatDate(dateString) {
    const date = new Date(dateString);
    const now = new Date();
    const diff = now - date;
    const seconds = Math.floor(diff / 1000);
    const minutes = Math.floor(seconds / 60);
    const hours = Math.floor(minutes / 60);
    const days = Math.floor(hours / 24);

    if (days > 7) {
      return date.toLocaleDateString();
    } else if (days > 0) {
      return `${days}d ago`;
    } else if (hours > 0) {
      return `${hours}h ago`;
    } else if (minutes > 0) {
      return `${minutes}m ago`;
    } else {
      return 'Just now';
    }
  }

  // Close dropdown when clicking outside
  document.addEventListener('click', function(event) {
    if (!notificationIcon.contains(event.target) && !notificationDropdown.contains(event.target)) {
      notificationDropdown.classList.add('hidden');
    }
  });

  // Fetch initial notifications
  fetchNotifications();
});

notificationList.addEventListener('click', function(event) {
  if (event.target.classList.contains('mark-read')) {
    markAsRead(event.target.dataset.id);
  } else if (event.target.classList.contains('delete-notification')) {
    deleteNotification(event.target.dataset.id);
  }
});

function markAsRead(notificationId) {
  axios.post(`/notifications/${notificationId}/read`)
    .then(function(response) {
      if (response.data.success) {
        const notificationElement = document.querySelector(`[data-id="${notificationId}"]`).closest('.p-4');
        notificationElement.querySelector('.mark-read').remove();
        updateNotificationCount(prevCount => prevCount - 1);
      }
    })
    .catch(function(error) {
      console.error('Error marking notification as read:', error);
    });
}

function deleteNotification(notificationId) {
  axios.delete(`/notifications/${notificationId}`)
    .then(function(response) {
      if (response.data.success) {
        const notificationElement = document.querySelector(`[data-id="${notificationId}"]`).closest('.p-4');
        notificationElement.remove();
        updateNotificationCount(prevCount => prevCount - 1);
      }
    })
    .catch(function(error) {
      console.error('Error deleting notification:', error);
    });
}

function updateNotificationCount(updateFn) {
  const currentCount = parseInt(notificationCount.textContent) || 0;
  const newCount = updateFn(currentCount);
  if (newCount > 0) {
    notificationCount.textContent = newCount > 99 ? '99+' : newCount;
    notificationCount.classList.remove('hidden');
  } else {
    notificationCount.classList.add('hidden');
  }
}

function handleLike() {
  document.querySelector(".posts")
    .addEventListener("click", function (ev) {
      if (ev.target.classList.contains('like')) {
        var icon = ev.target;

        axios(`/like/post/${ev.target.dataset.id}`)
          .then(function (res) {
            if (icon.classList.contains('ri-heart-3-line')) {
              icon.classList.remove('ri-heart-3-line');
              icon.classList.add('ri-heart-3-fill', 'text-red-500');
            }
            else {
              icon.classList.add('ri-heart-3-line');
              icon.classList.remove('ri-heart-3-fill', 'text-red-500');
            }
            ev.target.parentNode.parentNode.parentNode.querySelector('.likes').textContent = res.data.likes.length + ' likes';
          });
      }
    })
}

function makeHeartAnimation() {
  document.querySelector(".posts").addEventListener("click", function (ev) {
    if (ev.target.classList.contains('postimg')) {
      var icon = document.createElement('i');
      icon.classList.add('ri-heart-3-fill', 'text-6xl', 'text-red-500', 'z-[34]', 'absolute', 'left-1/2', '-translate-x-1/2', '-translate-y-96');
      ev.target.parentNode.parentNode.appendChild(icon);

      axios.get(`/like/post/${ev.target.dataset.id}`)
        .then(function (response) {
          var iconElement = ev.target.parentNode.parentNode.querySelector('.like');
          if (iconElement.classList.contains('ri-heart-3-line')) {
            iconElement.classList.remove('ri-heart-3-line');
            iconElement.classList.add('ri-heart-3-fill', 'text-red-500');
          } else {
            iconElement.classList.add('ri-heart-3-line');
            iconElement.classList.remove('ri-heart-3-fill', 'text-red-500');
          }

          var likes = ev.target.parentNode.parentNode.querySelector(".likes");

          if (response.data && response.data.likes) {
            likes.textContent = response.data.likes.length + ' likes';
          } else {
            console.error('Unexpected response structure:', response.data);
          }
        })
        .catch(function (error) {
          console.error('Error:', error); 
        });

      gsap.from(icon, {
        y: 20,
        opacity: 0,
        ease: 'linear',
        onComplete: function () {
          ev.target.parentNode.parentNode.removeChild(icon);
        }
      });
    }
  });
}

function handleSave(){
  var save = document.querySelector(".posts");
  save.addEventListener("click", function(ev){
    if(ev.target.classList.contains("save")){
      axios.get(`/bookmark/${ev.target.dataset.id}`)
      .then(function(res){
        if(ev.target.classList.contains('ri-bookmark-line')){
          ev.target.classList.add('ri-bookmark-fill', 'text-white');
          ev.target.classList.remove('ri-bookmark-line');
        }
      })
    }
  });
}

handleLike();
handleSave();
makeHeartAnimation();
</script>
<style>
  #notificationDropdown {
    box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
  }
  #notificationList {
    max-height: calc(80vh - 100px);
    overflow-y: auto;
  }
  #notificationList::-webkit-scrollbar {
    width: 6px;
  }
  #notificationList::-webkit-scrollbar-track {
    background: #f1f1f1;
  }
  #notificationList::-webkit-scrollbar-thumb {
    background: #888;
    border-radius: 3px;
  }
  #notificationList::-webkit-scrollbar-thumb:hover {
    background: #555;
  }
  .notification-badge {
    font-size: 0.7rem;
    min-width: 1rem;
    height: 1rem;
    padding: 0 0.3rem;
  }
</style>
<% include ./partials/footer.ejs %>