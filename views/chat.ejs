<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat with <%= friend.username %></title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: #121212;
            color: #e0e0e0;
            margin: 0;
            padding: 0;
        }

        .chat-container {
            display: flex;
            flex-direction: column;
            max-width: 800px;
            height: 100vh;
            margin: auto;
            box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);
        }

        .chat-header {
            background-color: #1f1f1f;
            padding: 15px 20px;
            border-bottom: 1px solid #333;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .chat-header h2 {
            margin: 0;
            font-size: 1.2em;
        }

        .chat-header .status {
            font-size: 0.8em;
            padding: 3px 8px;
            border-radius: 12px;
            background-color: rgba(0, 255, 0, 0.1);
        }

        .chat-messages {
            flex: 1;
            padding: 20px;
            overflow-y: auto;
            background-color: #121212;
        }

        .message {
            padding: 10px 15px;
            border-radius: 18px;
            margin-bottom: 15px;
            max-width: fit-content;
            font-size: 0.95em;
            line-height: 1.4;
            box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
        }

        .message.sent {
            background-color: #0084ff;
            color: #fff;
            margin-left: auto;
            border-bottom-right-radius: 4px;
        }

        .message.received {
            background-color: #333;
            color: #fff;
            border-bottom-left-radius: 4px;
        }

        .message-time {
            font-size: 0.7em;
            color: rgba(255, 255, 255, 0.7);
            margin-top: 5px;
            text-align: right;
        }

        .chat-input-container {
            display: flex;
            padding: 15px 20px;
            background-color: #1f1f1f;
        }

        .chat-input-container input {
            flex: 1;
            padding: 12px 15px;
            border: none;
            border-radius: 20px;
            background-color: #333;
            color: #e0e0e0;
            font-size: 0.95em;
        }

        .chat-input-container button {
            width: 60px;
            padding: 12px;
            border: none;
            border-radius: 50%;
            background-color: #0084ff;
            color: #fff;
            cursor: pointer;
            transition: background-color 0.3s;
            margin-left: 10px;
        }

        .chat-input-container button:hover {
            background-color: #0056b3;
        }

        .message-date {
            text-align: center;
            color: #888;
            margin: 20px 0;
            font-size: 0.8em;
        }

        .chat-messages {
            scroll-behavior: smooth;
        }

        .chat-messages::-webkit-scrollbar {
            width: 8px;
        }

        .chat-messages::-webkit-scrollbar-track {
            background: #1e1e1e;
        }

        .chat-messages::-webkit-scrollbar-thumb {
            background: #888;
            border-radius: 4px;
        }

        .chat-messages::-webkit-scrollbar-thumb:hover {
            background: #555;
        }

        @media (max-width: 600px) {
            .chat-container {
                width: 100%;
                height: 100vh;
            }
        }
    </style>
</head>
<body>
    <div class="chat-container">
        <div class="chat-header">
            <h2>Chat with <%= friend.username %></h2>
            <span class="status" id="status">Offline</span>
        </div>
        <div class="chat-messages" id="chat-messages"></div>
        <div class="chat-input-container">
            <input type="text" id="message-input" placeholder="Type a message..." />
            <button id="send-btn">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <line x1="22" y1="2" x2="11" y2="13"></line>
                    <polygon points="22 2 15 22 11 13 2 9 22 2"></polygon>
                </svg>
            </button>
        </div>
    </div>

    <script src="/socket.io/socket.io.js"></script>
    <script>
        const socket = io();

        const userId = '<%= user._id %>';
        const friendId = '<%= friend._id %>';

        socket.emit('userConnected', userId);

        socket.emit('fetchMessages', {
            sender: userId,
            receiver: friendId
        });

        socket.on('loadMessages', messages => {
            const chatMessages = document.getElementById('chat-messages');
            chatMessages.innerHTML = '';
            const groupedMessages = groupMessagesByDate(messages);
            groupedMessages.forEach(group => {
                const dateDiv = document.createElement('div');
                dateDiv.className = 'message-date';
                dateDiv.textContent = formatDate(group.date);
                chatMessages.appendChild(dateDiv);
                group.messages.forEach(message => {
                    const messageDiv = document.createElement('div');
                    messageDiv.className = `message ${message.sender === userId ? 'sent' : 'received'}`;
                    messageDiv.innerHTML = `
                        ${message.content}
                        <div class="message-time">${formatTime(message.timestamp)}</div>
                    `;
                    chatMessages.appendChild(messageDiv);
                });
            });
            chatMessages.scrollTop = chatMessages.scrollHeight;
        });

        function groupMessagesByDate(messages) {
            const groups = {};
            messages.forEach(message => {
                const date = new Date(message.timestamp).toLocaleDateString();
                if (!groups[date]) {
                    groups[date] = [];
                }
                groups[date].push(message);
            });
            return Object.keys(groups).map(date => ({ date, messages: groups[date] }));
        }

        function formatDate(dateString) {
            const options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };
            return new Date(dateString).toLocaleDateString(undefined, options);
        }

        function formatTime(timestamp) {
            return new Date(timestamp).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
        }

        document.getElementById('send-btn').addEventListener('click', sendMessage);
        document.getElementById('message-input').addEventListener('keydown', (e) => {
            if (e.key === 'Enter') {
                sendMessage();
            }
        });

        function sendMessage() {
            const messageInput = document.getElementById('message-input');
            const message = messageInput.value.trim();

            if (message !== '') {
                const messageData = {
                    sender: userId,
                    receiver: friendId,
                    content: message,
                    id: generateUniqueId()
                };
                socket.emit('sendMessage', messageData);
                messageInput.value = '';
            }
        }

        socket.on('receiveMessage', message => {
            const chatMessages = document.getElementById('chat-messages');
            const messageDiv = document.createElement('div');
            messageDiv.className = `message ${message.sender === userId ? 'sent' : 'received'}`;
            messageDiv.innerHTML = `
                ${message.content}
                <div class="message-time">${formatTime(new Date())}</div>
            `;
            chatMessages.appendChild(messageDiv);
            chatMessages.scrollTop = chatMessages.scrollHeight;
        });

        socket.on('messageRead', data => {
            const { userId, messageId } = data;
            const messageDivs = document.querySelectorAll(`#chat-messages .message`);
            messageDivs.forEach(div => {
                if (div.dataset.messageId === messageId && userId !== userId) {
                    div.classList.add('read');
                }
            });
        });

        socket.on('userOnline', data => {
            if (data.userId === friendId) {
                document.getElementById('status').innerText = 'Online';
                document.getElementById('status').style.backgroundColor = 'rgba(0, 255, 0, 0.1)';
            }
        });

        socket.on('userOffline', data => {
            if (data.userId === friendId) {
                document.getElementById('status').innerText = 'Offline';
                document.getElementById('status').style.backgroundColor = 'rgba(255, 0, 0, 0.1)';
            }
        });

        function generateUniqueId() {
            return Math.random().toString(36).substr(2, 9);
        }
    </script>
</body>
</html>